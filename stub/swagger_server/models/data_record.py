from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server import util


class DataRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, ts=None, lat=None, lon=None, temp=None, dust_value=None, place_type=None):  # noqa: E501
        """DataRecord - a model defined in OpenAPI

        :param id: The id of this DataRecord.  # noqa: E501
        :type id: int
        :param ts: The ts of this DataRecord.  # noqa: E501
        :type ts: datetime
        :param lat: The lat of this DataRecord.  # noqa: E501
        :type lat: float
        :param lon: The lon of this DataRecord.  # noqa: E501
        :type lon: float
        :param temp: The temp of this DataRecord.  # noqa: E501
        :type temp: float
        :param dust_value: The dust_value of this DataRecord.  # noqa: E501
        :type dust_value: float
        :param place_type: The place_type of this DataRecord.  # noqa: E501
        :type place_type: str
        """
        self.openapi_types = {
            'id': int,
            'ts': datetime,
            'lat': float,
            'lon': float,
            'temp': float,
            'dust_value': float,
            'place_type': str
        }

        self.attribute_map = {
            'id': 'ID',
            'ts': 'ts',
            'lat': 'lat',
            'lon': 'lon',
            'temp': 'temp',
            'dust_value': 'dust_value',
            'place_type': 'place_type'
        }

        self._id = id
        self._ts = ts
        self._lat = lat
        self._lon = lon
        self._temp = temp
        self._dust_value = dust_value
        self._place_type = place_type

    @classmethod
    def from_dict(cls, dikt) -> 'DataRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataRecord of this DataRecord.  # noqa: E501
        :rtype: DataRecord
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this DataRecord.


        :return: The id of this DataRecord.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this DataRecord.


        :param id: The id of this DataRecord.
        :type id: int
        """

        self._id = id

    @property
    def ts(self) -> datetime:
        """Gets the ts of this DataRecord.


        :return: The ts of this DataRecord.
        :rtype: datetime
        """
        return self._ts

    @ts.setter
    def ts(self, ts: datetime):
        """Sets the ts of this DataRecord.


        :param ts: The ts of this DataRecord.
        :type ts: datetime
        """

        self._ts = ts

    @property
    def lat(self) -> float:
        """Gets the lat of this DataRecord.


        :return: The lat of this DataRecord.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """Sets the lat of this DataRecord.


        :param lat: The lat of this DataRecord.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self) -> float:
        """Gets the lon of this DataRecord.


        :return: The lon of this DataRecord.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon: float):
        """Sets the lon of this DataRecord.


        :param lon: The lon of this DataRecord.
        :type lon: float
        """

        self._lon = lon

    @property
    def temp(self) -> float:
        """Gets the temp of this DataRecord.


        :return: The temp of this DataRecord.
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp: float):
        """Sets the temp of this DataRecord.


        :param temp: The temp of this DataRecord.
        :type temp: float
        """

        self._temp = temp

    @property
    def dust_value(self) -> float:
        """Gets the dust_value of this DataRecord.


        :return: The dust_value of this DataRecord.
        :rtype: float
        """
        return self._dust_value

    @dust_value.setter
    def dust_value(self, dust_value: float):
        """Sets the dust_value of this DataRecord.


        :param dust_value: The dust_value of this DataRecord.
        :type dust_value: float
        """

        self._dust_value = dust_value

    @property
    def place_type(self) -> str:
        """Gets the place_type of this DataRecord.


        :return: The place_type of this DataRecord.
        :rtype: str
        """
        return self._place_type

    @place_type.setter
    def place_type(self, place_type: str):
        """Sets the place_type of this DataRecord.


        :param place_type: The place_type of this DataRecord.
        :type place_type: str
        """
        allowed_values = ["Closed_uncleaned_area", "Closed_cleaned_area", "Open_good_environment"]  # noqa: E501
        if place_type not in allowed_values:
            raise ValueError(
                "Invalid value for `place_type` ({0}), must be one of {1}"
                .format(place_type, allowed_values)
            )

        self._place_type = place_type
